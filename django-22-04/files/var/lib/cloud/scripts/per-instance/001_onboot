#!/bin/bash -x
exec > >(tee /var/log/one_click_setup.log) 2>&1

# Create the example project
(cd /home/django &&
    setuid django django-admin startproject django_project)

PROJECT_DIR=/home/django/django_project
SETTINGS_DIR="${PROJECT_DIR}/django_project"
STATIC_DIR="${SETTINGS_DIR}/static"
SETTINGS_FILE="${SETTINGS_DIR}/settings.py"

PG_PASS=""
PG_USER=postgres
PG_DB=postgres

DJANGO_POSTGRESS_HOST=localhost
DJANGO_POSTGRESS_PORT=5432

# Generate some passwords
cat > /root/.digitalocean_passwords <<EOM
DJANGO_USER=django
DJANGO_USER_PASSWORD=$(openssl rand -hex 16)
DJANGO_POSTGRESS_PASS=$(openssl rand -hex 16)
DJANGO_SECRET_KEY=$(openssl rand -hex 16)
SECRET_KEY=$(openssl rand -hex 16)
EOM

echo "SETTINGS_FILE=$SETTINGS_FILE" >> /root/.digitalocean_passwords

source /root/.digitalocean_passwords

# Create the settings directory if it doesn't exist
if [[ ! -d "$SETTINGS_DIR" ]]
then
    mkdir -p "$SETTINGS_DIR"
fi

for src_file_name in settings.py urls.py views.py static
do
    dest_file="${SETTINGS_DIR}/${src_file_name}"

    # If an existing settings file exists, save the original
    if [[ -f "$dest_file" ]]
    then
        mv "$dest_file" "${dest_file}.orig"
    fi

    cp -r "/var/lib/digitalocean/${src_file_name}" "${dest_file}"
done

# Set the django user password
echo "${DJANGO_USER}:${DJANGO_USER_PASSWORD}" | chpasswd -

# Set up postgres user and database
if [ -f "/root/.digitalocean_dbaas_credentials" ] && [ "$(sed -n "s/^db_protocol=\"\([^:]*\):.*\"$/\1/p" /root/.digitalocean_dbaas_credentials)" = "postgresql" ]; then
then
  # grab all the data from the dbaas credentials file
  DJANGO_POSTGRESS_HOST=$(sed -n "s/^db_host=\"\(.*\)\"$/\1/p" /root/.digitalocean_dbaas_credentials)
  DJANGO_POSTGRESS_PORT=$(sed -n "s/^db_port=\"\(.*\)\"$/\1/p" /root/.digitalocean_dbaas_credentials)
  PG_USER=$(sed -n "s/^db_username=\"\(.*\)\"$/\1/p" /root/.digitalocean_dbaas_credentials)
  PG_DB=$(sed -n "s/^db_database=\"\(.*\)\"$/\1/p" /root/.digitalocean_dbaas_credentials)
  PG_PASS=$(sed -n "s/^db_password=\"\(.*\)\"$/\1/p" /root/.digitalocean_dbaas_credentials)

  # wait for db to become available
  echo -e "\nWaiting for your database to become available (this may take a few minutes)"
  while ! pg_isready -h "$DJANGO_POSTGRESS_HOST" -p "$DJANGO_POSTGRESS_PORT"; do
     printf .
     sleep 2
  done

  echo -e "\nDatabase available!\n"

  PGPASSWORD=$PG_PASS psql -h $DJANGO_POSTGRESS_HOST -p $DJANGO_POSTGRESS_PORT -U $PG_USER -d $PG_DB -c "CREATE USER ${DJANGO_USER} PASSWORD '${DJANGO_POSTGRESS_PASS}';" --set=sslmode=require
  PGPASSWORD=$PG_PASS psql -h $DJANGO_POSTGRESS_HOST -p $DJANGO_POSTGRESS_PORT -U $PG_USER -d $PG_DB -c "CREATE DATABASE django;" --set=sslmode=require

  # If no dbaas - set local database
else
  setuid postgres psql -U postgres -d postgres -c "CREATE USER ${DJANGO_USER} PASSWORD '${DJANGO_POSTGRESS_PASS}';"
  setuid postgres createdb django
fi

sed -e "s/@DBPASSWORD@/${DJANGO_POSTGRESS_PASS}/" \
    -e "s/@SECRET_KEY@/${DJANGO_SECRET_KEY}/" \
    -e "s/@DBHOST@/${DJANGO_POSTGRESS_HOST}/" \
    -e "s/@DBPORT@/${DJANGO_POSTGRESS_PORT}/" \
    -i "${SETTINGS_FILE}"

# Sync the database
python3 "${PROJECT_DIR}/manage.py" migrate --noinput

echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('$DJANGO_USER', 'temp@example.com', '$DJANGO_USER_PASSWORD')" | python3 "${PROJECT_DIR}/manage.py" shell

# Now start up gunicorn
systemctl enable gunicorn
systemctl start gunicorn
systemctl restart nginx

# Remove the ssh force logout command
sed -e '/Match User root/d' \
    -e '/.*ForceCommand.*droplet.*/d' \
    -i /etc/ssh/sshd_config

systemctl restart ssh
